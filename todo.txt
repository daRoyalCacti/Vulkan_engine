Staging buffer has dedicated transfer queue (do after texture tutorial -- requires memory barriers):
    Transfer queue at https://vulkan-tutorial.com/Vertex_buffers/Staging_buffer

    I disagree with "Change the sharingMode of resources to be VK_SHARING_MODE_CONCURRENT and specify both the graphics and transfer queue families"

    In our case, the buffer will be used only by the graphicQueue, or the transferQueue, not both at the same time.
    So, instead of using VK_SHARING_MODE_CONCURRENT, it should be better to use a memory barrier to release ownership from the graphicQueue to the transferQueue, make the copy, and release ownership from the transferQueue to the graphicQueue.

Allow for multiple transfers to happen at once
    Currently copying data calls for the devic to idle
    Should instead use fences

1 vkAllocateMemory call
    Currently each mesh has its own buffer for vertices and indices
    The maximum number of buffers is only around 4000 so this is bad
    Need to create big buffers and copy the vertex data into them using offsets

Abstract making a geneneral command buffer
    have main drawing command buffer
    and also a command buffer for creating vertex buffer

Make making buffers better
    current the vertices and indices for a mehs are stored in different VkBuffer objects
    It is apparently better to store them in the same buffer and use offsets to access them individually (like in vkCmdBindVertexBuffers)
    This means the data is more cache friendly

Abstract creating the full process of creating and copying data into a buffer
    Creating the vertex and index buffer are very similar

Abstract descriptor_set_layout to allow for multiple bindings with different types
    current only has binding=0 with the mvvp matrices

Abstract uniform_buffer_objects
    currently only have 1, but all other UBO will have very similar code

Update the uniform buffer object to interact with the camera class when created
    currently just have hard coded values for everything (fov, nearplane, etc.)

Do not always load images with an alpha channel
    currently an stb_image flag is set to always load images with an alpha channel
    this is not so good for memory use

Save memory types (buffer.cpp)
    currently everytime a buffer is created it finds the memory type required by the buffer
    but buffers with the same usage should (hopefully) use the memory type

Combine single use command buffers into into a larger queue
    Currently wait for each queue to become idle
    These queues are used a lot when uploading images to the GPU